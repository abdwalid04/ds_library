Metadata-Version: 2.1
Name: ds-library
Version: 0.1.0
Summary: A data science library for text embedding, clustering, dimensionality reduction, and visualization
Home-page: https://github.com/abdwalid04/ds_library
Author: Abdellah WALID
Author-email: abdellahwalid04@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown

# Data Science Library
## Overview
This library is designed to facilitate text embedding, clustering, dimensionality reduction, and visualization of clusters. It can be used both as a command-line interface (CLI) and as a Python module, providing flexibility and ease of use for data scientists and developers.

Features
- `Text Embedding:` Utilizes the sentence_transformers library with the all-MiniLM-v6 model to embed text.

- `Clustering:` Implements Agglomerative Clustering to group similar data points.

- `Dimensionality Reduction:` Supports PCA and UMAP for reducing the dimensionality of data.

- `Visualization:` Creates 2D and 3D scatter plots using matplotlib, color-coded by cluster labels.

## How to Install the Library

Clone the repository:
```bash
git clone https://github.com/abdwalid04/ds_library
```

Navigate to the repository directory:
```bash
cd ds_library
```

Install the library:
```bash
pip install .
```

## Usage
### As a CLI Tool
The CLI tool allows you to process input data and output visualizations with ease. Use the following commands to interact with the CLI:

```bash
ds_tool --input <input_file> --output <output_directory> --method <pca|umap> --clusters <number_of_clusters>
```

### As a Python Module
You can also integrate the library into your Python projects. Below is an example of how to use the library:

```python
# Import the necessary components from the library
from ds_library.embedding_service.embedding_service import VectorEmbedService
from ds_library.agglomerative_clustering.agglomerative_clustering import ClusteringService
from ds_library.dimensionality_reduction.dimensionality_reduction import DimensionalityReductionService
from ds_library.visualization_service.visualization_service import VisualizationService

sentences = []

# Read the CSV file into a list
with open(args.input_file, "r", encoding="utf-8") as file:
    reader = csv.reader(file)
    next(reader)  # Skip the header line
    for row in reader:
        if row:  # Ensure the row is not empty
            sentences.append(row[-1])

embedding_service = VectorEmbedService(embedder_type="sentence_transformer", model_name ="all-MiniLM-L6-v2")

# Perform clustering
aggl_clustering = AgglomerativeClustering(embedding_service=embedding_service)

clusters = aggl_clustering.cluster(
    sentences=sentences,
    threshold=0.7,
    min_cluster_size=3,
    batch_size=32,
    parallel=False,
    show_progress_bar=True,
)

# Perform dimensionality reduction
dim_reduc = DimensionalityReduction(
    embedding_service=embedding_service,
    algorithm="UMAP",
    num_components=3,
)

reduced_embeddings = dim_reduc.reduce(sentences=sentences, save_path="./output.npy")

# Plot the results
plot_embeddings_clusters(
    embeddings=reduced_embeddings,
    clusters=clusters,
    title=f"UMAP 3D Clustering",
    save_path="./output.png",
)
```
